"use strict";(self.webpackChunkcarbide_docs=self.webpackChunkcarbide_docs||[]).push([[411],{4137:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>g});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),g=a,y=p["".concat(s,".").concat(g)]||p[g]||d[g]||i;return t?n.createElement(y,o(o({ref:r},u),{},{components:t})):n.createElement(y,o({ref:r},u))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5160:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(7462),a=(t(7294),t(4137));const i={},o="Enforcement",l={unversionedId:"registry-docs/enforcement",id:"registry-docs/enforcement",title:"Enforcement",description:"This page will walk you through configuring Policy Enforcement (Kubewarden, Kyverno, Open Policy Agent) to ensure images running in your cluster that come from the hardened registry are validated against our public key before deploying.",source:"@site/docs/registry-docs/enforcement.md",sourceDirName:"registry-docs",slug:"/registry-docs/enforcement",permalink:"/carbide-docs/docs/registry-docs/enforcement",draft:!1,editUrl:"https://github.com/rancherfederal/carbide-docs/edit/main/docs/registry-docs/enforcement.md",tags:[],version:"current",frontMatter:{},sidebar:"carbideSidebar",previous:{title:"Rancher Manager Configuration",permalink:"/carbide-docs/docs/registry-docs/rancher-config"},next:{title:"RKE2/K3s Uninstall",permalink:"/carbide-docs/docs/registry-docs/uninstall-kubernetes"}},s={},c=[{value:"Kubewarden Enforcement",id:"kubewarden-enforcement",level:2},{value:"Installation",id:"installation",level:3},{value:"Private Registry",id:"private-registry",level:3},{value:"Copying Policy Artifact to a Registry (Connected Environments)",id:"copying-policy-artifact-to-a-registry-connected-environments",level:3},{value:"Saving Policy Artifact (Airgaped Environments)",id:"saving-policy-artifact-airgaped-environments",level:3},{value:"Loading Policy Artifact to a Registry (Airgaped Environments)",id:"loading-policy-artifact-to-a-registry-airgaped-environments",level:3},{value:"Creating the Policy",id:"creating-the-policy",level:3},{value:"Kyverno Enforcement",id:"kyverno-enforcement",level:2},{value:"Installation",id:"installation-1",level:3},{value:"Private Registry",id:"private-registry-1",level:3},{value:"Creating the Policy",id:"creating-the-policy-1",level:3},{value:"OPA Gatekeeper Enforcement",id:"opa-gatekeeper-enforcement",level:2}],u={toc:c};function d(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enforcement"},"Enforcement"),(0,a.kt)("p",null,"This page will walk you through configuring Policy Enforcement (Kubewarden, Kyverno, Open Policy Agent) to ensure images running in your cluster that come from the hardened registry are validated against our public key before deploying."),(0,a.kt)("h2",{id:"kubewarden-enforcement"},"Kubewarden Enforcement"),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("p",null,"To install Kubewarden, run the following commands, substituting your registry information:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# add and update the helm chart repository\nhelm repo add kubewarden https://charts.kubewarden.io\nhelm repo update\n\n# install the crds helm chart\nhelm install --wait -n kubewarden --create-namespace kubewarden-crds kubewarden/kubewarden-crds\n\n# install the controller helm chart\nhelm install --wait -n kubewarden kubewarden-controller kubewarden/kubewarden-controller --set "common.cattle.systemDefaultRegistry=<registry-url>"\n\n# install the defaults helm chart\nhelm install --wait -n kubewarden kubewarden-defaults kubewarden/kubewarden-defaults --set "common.cattle.systemDefaultRegistry=<registry-url>" kubewarden/kubewarden-defaults\n')),(0,a.kt)("p",null,"For more information about installing Kubewarden, see the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.kubewarden.io/quick-start#installation"},"docs"),"."),(0,a.kt)("h3",{id:"private-registry"},"Private Registry"),(0,a.kt)("p",null,"If your Rancher system images are in a private registry requiring authentication, you'll need to configure your Kubewarden policy-server with a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.kubewarden.io/operator-manual/policy-servers/private-registry"},"Pull Secret")," in order for it to validate the signature."),(0,a.kt)("h3",{id:"copying-policy-artifact-to-a-registry-connected-environments"},"Copying Policy Artifact to a Registry (Connected Environments)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the image from the carbide secured registry\nhauler store add image rgcrprod.azurecr.us/policies/verify-image-signatures:v0.1.7 --key carbide-key.pub --platform linux/amd64\n\n# copy the content from the hauler store to your registry\nhauler store copy --username <redacted> --password <redacted> registry://<registry-url>\n")),(0,a.kt)("h3",{id:"saving-policy-artifact-airgaped-environments"},"Saving Policy Artifact (Airgaped Environments)"),(0,a.kt)("p",null,"Use the below script, substituting your registry, to both validate and save locally the policy artifact:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the image from the carbide secured registry\nhauler store add image rgcrprod.azurecr.us/policies/verify-image-signatures:v0.1.7 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename kubewarden-policy.tar.zst\n")),(0,a.kt)("h3",{id:"loading-policy-artifact-to-a-registry-airgaped-environments"},"Loading Policy Artifact to a Registry (Airgaped Environments)"),(0,a.kt)("p",null,"To move the Policy Artifact into your registry, use the following script and the resulting TAR from the ",(0,a.kt)("a",{parentName:"p",href:"/carbide-docs/docs/registry-docs/enforcement#saving-the-policy-artifact"},"Saving Policy"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# load the content from the tarball to the hauler store\nhauler store load kubewarden-policy.tar.zst\n\n# copy the content from the hauler store to your registry\nhauler store copy --username <redacted> --password <redacted> registry://<registry-url>\n")),(0,a.kt)("h3",{id:"creating-the-policy"},"Creating the Policy"),(0,a.kt)("p",null,"After installing/configuring Kubewarden and copying the policy to your registry, apply the following ClusterAdmissionPolicy (substituting ",(0,a.kt)("inlineCode",{parentName:"p"},"<registry-url>")," with your registry domain):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: verify-image-signatures\nspec:\n  module: <registry-url>/policies/verify-image-signatures:v0.1.7\n  rules:\n    - apiGroups: ['', 'apps', 'batch']\n      apiVersions: ['v1']\n      resources:\n        [\n          'pods',\n          'deployments',\n          'statefulsets',\n          'replicationcontrollers',\n          'jobs',\n          'cronjobs',\n        ]\n      operations:\n        - CREATE\n        - UPDATE\n  mutating: true\n  settings:\n    signatures:\n      - image: '<registry-url>/carbide/*'\n        pubKeys:\n          - |\n            -----BEGIN PUBLIC KEY-----\n            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n            tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n            -----END PUBLIC KEY-----\n      - image: '<registry-url>/jetstack/*'\n        pubKeys:\n          - |\n            -----BEGIN PUBLIC KEY-----\n            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n            tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n            -----END PUBLIC KEY-----\n      - image: '<registry-url>/rancher/*'\n        pubKeys:\n          - |\n            -----BEGIN PUBLIC KEY-----\n            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n            tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n            -----END PUBLIC KEY-----\n      - image: '<registry-url>/longhornio/*'\n        pubKeys:\n          - |\n            -----BEGIN PUBLIC KEY-----\n            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n            tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n            -----END PUBLIC KEY-----\n      - image: '<registry-url>/neuvector/*'\n        pubKeys:\n          - |\n            -----BEGIN PUBLIC KEY-----\n            MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n            tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n            -----END PUBLIC KEY-----\n")),(0,a.kt)("h2",{id:"kyverno-enforcement"},"Kyverno Enforcement"),(0,a.kt)("h3",{id:"installation-1"},"Installation"),(0,a.kt)("p",null,"See the docs on how to install ",(0,a.kt)("a",{parentName:"p",href:"https://kyverno.io/docs/installation"},"Kyverno")," onto your cluster."),(0,a.kt)("h3",{id:"private-registry-1"},"Private Registry"),(0,a.kt)("p",null,"If your Rancher system images are in a private registry requiring authentication, you'll need to configure your Kyverno policy-server with a ",(0,a.kt)("a",{parentName:"p",href:"https://kyverno.io/policies/other/require_imagepullsecrets/require_imagepullsecrets"},"Pull Secret")," in order for it to validate the signature."),(0,a.kt)("h3",{id:"creating-the-policy-1"},"Creating the Policy"),(0,a.kt)("p",null,"After installing/configuring Kyverno, apply the following Policy (substituting ",(0,a.kt)("inlineCode",{parentName:"p"},"<registry-url>")," with your registry domain):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: kyverno.io/v1\nkind: Policy\nmetadata:\n  name: verify-image-signatures\nspec:\n  validationFailureAction: enforce\n  background: false\n  webhookTimeoutSeconds: 30\n  failurePolicy: Fail\n  rules:\n    - name: check-image\n      match:\n        any:\n          - resources:\n              kinds:\n                - Pod\n                - Deployment\n      verifyImages:\n        - imageReferences:\n            - '<registry-url>/carbide/*'\n            - '<registry-url>/jetstack/*'\n            - '<registry-url>/rancher/*'\n            - '<registry-url>/longhornio/*'\n            - '<registry-url>/neuvector/*'\n          attestors:\n            - count: 1\n              entries:\n                - keys:\n                    publicKeys: |-\n                      -----BEGIN PUBLIC KEY-----\n                      MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n                      tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n                      -----END PUBLIC KEY-----\n")),(0,a.kt)("h2",{id:"opa-gatekeeper-enforcement"},"OPA Gatekeeper Enforcement"),(0,a.kt)("p",null,"Gatekeeper can be used to verify image signatures through its ",(0,a.kt)("a",{parentName:"p",href:"https://open-policy-agent.github.io/gatekeeper/website/docs/externaldata"},"External Data Provider"),"."))}d.isMDXComponent=!0}}]);