"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3497],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>p});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=c(r),p=i,m=g["".concat(l,".").concat(p)]||g[p]||u[p]||a;return r?n.createElement(m,o(o({ref:t},d),{},{components:r})):n.createElement(m,o({ref:t},d))}));function p(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},6327:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={},o="Getting Started",s={unversionedId:"stigatron-docs/getting-started",id:"stigatron-docs/getting-started",title:"Getting Started",description:"This will guide you through getting started with STIGATRON.",source:"@site/docs/stigatron-docs/3-getting-started.md",sourceDirName:"stigatron-docs",slug:"/stigatron-docs/getting-started",permalink:"/carbide-docs/docs/stigatron-docs/getting-started",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/stigatron-docs/3-getting-started.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Requirements",permalink:"/carbide-docs/docs/stigatron-docs/prereqs"},next:{title:"Installation",permalink:"/carbide-docs/docs/stigatron-docs/installation"}},l={},c=[{value:"STIGATRON Images",id:"stigatron-images",level:2},{value:"Configuring Registry Credentials",id:"configuring-registry-credentials",level:2},{value:"Local Cluster",id:"local-cluster",level:3},{value:"Downstream RKE2 Clusters",id:"downstream-rke2-clusters",level:3},{value:"Rancher-Provisioned RKE2 Cluster (TODO SCREENSHOTS)",id:"rancher-provisioned-rke2-cluster-todo-screenshots",level:3},{value:"Imported RKE2 Cluster",id:"imported-rke2-cluster",level:3},{value:"Configuring the Carbide Helm Repo",id:"configuring-the-carbide-helm-repo",level:2},{value:"Internet-Connected",id:"internet-connected",level:3},{value:"Air-Gap",id:"air-gap",level:3}],d={toc:c};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"This will guide you through getting started with STIGATRON."),(0,i.kt)("h2",{id:"stigatron-images"},"STIGATRON Images"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The images for STIGATRON can be found ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/rancherfederal/carbide-images/releases/"},"here"),". You'll need to pull these images using ",(0,i.kt)("inlineCode",{parentName:"li"},"cosign")," (we intend to improve the packaging/management of these images in an upcoming release):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Carbide Registry\nSOURCE_REGISTRY=rgcrprod.azurecr.us\nSOURCE_REGISTRY_USER=YOUR_CARBIDE_USER\nSOURCE_REGISTRY_PASS=YOUR_CARBIDE_PASS\n\n# Working directories & TAR\nDEST_DIRECTORY=/tmp/stigatron-images\nDEST_TAR=/tmp/stigatron-images.tar.gz  # Change this to the location you want for your resulting TAR \n\n# STIGATRON Version\nSTIGATRON_RELEASE=0.1.0\n\nif [[ -d "$DEST_DIRECTORY" ]]; then\n    echo "ERROR: Directory \'$DEST_DIRECTORY\' exists."\n    echo "Change or delete it before running."\n    exit 1\nfi\n\nif [[ -d "$DEST_TAR" ]]; then\n    echo "ERROR: Directory \'$DEST_TAR\' exists."\n    echo "Change or delete it before running."\n    exit 1\nfi\n\ncosign login -u $SOURCE_REGISTRY_USER -p $SOURCE_REGISTRY_PASS $SOURCE_REGISTRY\nmkdir -p "$DEST_DIRECTORY"\n\nSTIGATRON_IMAGES=$(curl --silent -L https://github.com/rancherfederal/carbide-images/releases/download/stigatron-$STIGATRON_RELEASE/stigatron-images.txt)\nfor image in $STIGATRON_IMAGES; do\n    source_image=$(echo $image | sed "s|docker.io|$SOURCE_REGISTRY|g")\n    dest_image=$(echo $image | sed "s|docker.io|TARGET_REGISTRY|g")\n    \n    # Create manifest to use during load\n    img_id_num=$(echo $RANDOM | md5sum | head -c 20)\n    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt\n    \n    # Save image locally\n    mkdir $DEST_DIRECTORY/$img_id_num\n    cosign save --dir "$DEST_DIRECTORY/$img_id_num" $source_image\ndone\n\n# Compress directory\ntar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .\n\n# Clean up working directory\nrm -rf $DEST_DIRECTORY\n')),(0,i.kt)("h2",{id:"configuring-registry-credentials"},"Configuring Registry Credentials"),(0,i.kt)("h3",{id:"local-cluster"},"Local Cluster"),(0,i.kt)("p",null,"On the local cluster running Rancher Multi-cluster Manager, you'll need to configure credentials for the registry you've copied the STIGATRON images to. See the ",(0,i.kt)("a",{parentName:"p",href:"/carbide-docs/docs/registry-docs/z-rancher-config"},"Rancher Configuration")," on how to set up those credentials."),(0,i.kt)("h3",{id:"downstream-rke2-clusters"},"Downstream RKE2 Clusters"),(0,i.kt)("p",null,"For downstream RKE2 clusters, you'll need to also configure registry credentials. Depending on how RKE2 was configured and set up, there are a few ways to do this."),(0,i.kt)("h3",{id:"rancher-provisioned-rke2-cluster-todo-screenshots"},"Rancher-Provisioned RKE2 Cluster (TODO SCREENSHOTS)"),(0,i.kt)("p",null,"If you provisioned or are provisioning RKE2 directly from the Rancher UI, you can configure/update that cluster with credentials."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Click the upper-left menu and navigate to ",(0,i.kt)("inlineCode",{parentName:"li"},"Cluster Management"),"."),(0,i.kt)("li",{parentName:"ol"},"If updating an existing cluster, select that cluster, click the 3-dot menu in the upper-right, and select ",(0,i.kt)("inlineCode",{parentName:"li"},"Edit Config"),". If creating a new cluster, just click ",(0,i.kt)("inlineCode",{parentName:"li"},"Create")," in the upper-left."),(0,i.kt)("li",{parentName:"ol"},"Once you get to the screen to update/create the cluster's node pools, scroll to the bottom under ",(0,i.kt)("inlineCode",{parentName:"li"},"Cluster Configuration")," and find the ",(0,i.kt)("inlineCode",{parentName:"li"},"Registries")," tab."),(0,i.kt)("li",{parentName:"ol"},"Select the second option (",(0,i.kt)("inlineCode",{parentName:"li"},"Use specified private registry for Rancher System Container Images"),")."),(0,i.kt)("li",{parentName:"ol"},"Enter your registry hostname in the first box."),(0,i.kt)("li",{parentName:"ol"},"In the ",(0,i.kt)("inlineCode",{parentName:"li"},"Authentication")," box, select ",(0,i.kt)("inlineCode",{parentName:"li"},"Create a HTTP Basic Auth Secret")," and enter your credentials.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For future clusters using the same registry, you can just select existing secret.")),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Click ",(0,i.kt)("inlineCode",{parentName:"p"},"Save"),"."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{alt:"Rancher Registry Configuration",src:r(9875).Z,width:"3078",height:"1042"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Wait for cluster to reconcile."))),(0,i.kt)("h3",{id:"imported-rke2-cluster"},"Imported RKE2 Cluster"),(0,i.kt)("p",null,"If you're working with a cluster that was imported or is to be imported into the Rancher MCM, you'll need to update the containerd ",(0,i.kt)("inlineCode",{parentName:"p"},"registries.yaml")," file on every node, substituting your registry hostname and credentials:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# /etc/rancher/rke2/registries.yaml\nconfigs:\n  "YOUR_REGISTRY_HOSTNAME":\n    auth:\n      username: YOUR_REGISTRY_USERNAME\n      password: YOUR_REGISTRY_PASSWORD\n')),(0,i.kt)("h2",{id:"configuring-the-carbide-helm-repo"},"Configuring the Carbide Helm Repo"),(0,i.kt)("h3",{id:"internet-connected"},"Internet-Connected"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"helm repo add carbide-charts https://rancherfederal.github.io/carbide-charts\nhelm repo update\nhelm search repo carbide-charts\nhelm install example-release carbide-charts/<chart>\n")),(0,i.kt)("h3",{id:"air-gap"},"Air-Gap"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"helm repo add carbide-charts https://rancherfederal.github.io/carbide-charts\nhelm repo update\nhelm search repo carbide-charts\nhelm pull carbide-charts/<chart>\n")),(0,i.kt)("p",null,"Take the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"tgz")," file over the airgap, then on the airgapped device:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"helm install example-release <chart-x.y.z>.tgz\n")))}u.isMDXComponent=!0},9875:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/registry-configuration-b07e5b64159cbcd2fad422211645667f.png"}}]);