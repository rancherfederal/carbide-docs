"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2639],{4137:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var i=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,a=function(e,t){if(null==e)return{};var r,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),p=a,y=d["".concat(l,".").concat(p)]||d[p]||g[p]||n;return r?i.createElement(y,s(s({ref:t},u),{},{components:r})):i.createElement(y,s({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,s=new Array(n);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<n;c++)s[c]=r[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7258:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var i=r(7462),a=(r(7294),r(4137));const n={},s="Validating Images",o={unversionedId:"registry-docs/validating-images",id:"registry-docs/validating-images",title:"Validating Images",description:"This will guide you through validating the signatures and attestations of each image in the secured registry, as well as how to download artifacts about the image (SBOM, Trivy Vulnerability Scan).",source:"@site/docs/registry-docs/validating-images.md",sourceDirName:"registry-docs",slug:"/registry-docs/validating-images",permalink:"/carbide-docs/docs/registry-docs/validating-images",draft:!1,editUrl:"https://github.com/rancherfederal/carbide-docs/edit/main/docs/registry-docs/validating-images.md",tags:[],version:"current",frontMatter:{},sidebar:"carbideSidebar",previous:{title:"Prerequisites",permalink:"/carbide-docs/docs/registry-docs/prereqs"},next:{title:"Copy Release Images to Registry",permalink:"/carbide-docs/docs/registry-docs/copying-images"}},l={},c=[{value:"ssf-key.pub",id:"ssf-keypub",level:4},{value:"Secure Supply Chain",id:"secure-supply-chain",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Checking the Digital Signature In A Registry",id:"checking-the-digital-signature-in-a-registry",level:2},{value:"Software Bill of Materials",id:"software-bill-of-materials",level:3},{value:"Vulnerability Scan Results",id:"vulnerability-scan-results",level:3},{value:"Resources",id:"resources",level:3}],u={toc:c};function g(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validating-images"},"Validating Images"),(0,a.kt)("p",null,"This will guide you through validating the signatures and attestations of each image in the secured registry, as well as how to download artifacts about the image (SBOM, Trivy Vulnerability Scan)."),(0,a.kt)("h4",{id:"ssf-keypub"},"ssf-key.pub"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\ntCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n-----END PUBLIC KEY-----\n")),(0,a.kt)("h2",{id:"secure-supply-chain"},"Secure Supply Chain"),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.sigstore.dev/cosign/installation/"},"Cosign CLI"))),(0,a.kt)("h2",{id:"checking-the-digital-signature-in-a-registry"},"Checking the Digital Signature In A Registry"),(0,a.kt)("p",null,"Before pulling images, or after images have been pushed to a registry, you should verify those images against the RGS public key. These instructions are for verifying images directly from a registry."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"NOTE"),": You'll need to substitute ",(0,a.kt)("inlineCode",{parentName:"p"},"rgcrprod.azurecr.us")," with your own registry domain if verifying in your own registry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# export the public key for the production ssf\nexport KEY=ssf-key.pub\n# Verifying the image's attestation by validating the supplied signature\ncosign verify --key $KEY rgcrprod.azurecr.us/rancher/rancher:v2.7.1\n")),(0,a.kt)("h3",{id:"software-bill-of-materials"},"Software Bill of Materials"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Verifying the image's SBOM attestation by validating the supplied signature\ncosign verify --key $KEY rgcrprod.azurecr.us/rancher/rancher:v2.7.1 --attachment sbom\n\n# Viewing the image's SBOM\ncosign download sbom rgcrprod.azurecr.us/rancher/rancher:v2.7.1\n")),(0,a.kt)("h3",{id:"vulnerability-scan-results"},"Vulnerability Scan Results"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Verifying the image's SBOM attestation by validating the supplied signature\ncosign verify-attestation --key $KEY rgcrprod.azurecr.us/rancher/rancher:v2.7.1 --type vuln > /dev/null\n\n# Viewing the image's vulnerability scan results\ncosign verify-attestation --key $KEY rgcrprod.azurecr.us/rancher/rancher:v2.7.1 --type vuln | jq -r '.payload' | base64 -d | jq\n")),(0,a.kt)("h3",{id:"resources"},"Resources"),(0,a.kt)("p",null,"For more information on ",(0,a.kt)("inlineCode",{parentName:"p"},"cosign"),", check out ",(0,a.kt)("a",{parentName:"p",href:"https://edu.chainguard.dev/open-source/sigstore/cosign/how-to-verify-file-signatures-with-cosign/"},"Chainguard Academy"),"."))}g.isMDXComponent=!0}}]);