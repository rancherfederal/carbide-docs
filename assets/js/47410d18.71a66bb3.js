"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6411],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),y=c(t),d=i,g=y["".concat(s,".").concat(d)]||y[d]||p[d]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(4137));const a={},o="Enforcement",l={unversionedId:"registry-docs/enforcement",id:"registry-docs/enforcement",title:"Enforcement",description:"This page will walk you through configuring Policy Enforcement (Kubewarden, Kyverno, Open Policy Agent) to ensure images running in your cluster that come from the hardened registry are validated against our public key before deploying.",source:"@site/docs/registry-docs/enforcement.md",sourceDirName:"registry-docs",slug:"/registry-docs/enforcement",permalink:"/carbide-docs/docs/registry-docs/enforcement",draft:!1,editUrl:"https://github.com/rancherfederal/carbide-docs/edit/main/docs/registry-docs/enforcement.md",tags:[],version:"current",frontMatter:{},sidebar:"carbideSidebar",previous:{title:"Rancher Manager Configuration",permalink:"/carbide-docs/docs/registry-docs/rancher-config"},next:{title:"RKE2/K3s Uninstall",permalink:"/carbide-docs/docs/registry-docs/uninstall-kubernetes"}},s={},c=[{value:"Kubewarden Enforcement",id:"kubewarden-enforcement",level:2},{value:"Installation",id:"installation",level:3},{value:"Private Registry",id:"private-registry",level:3},{value:"Copying Policy Artifact to Registry",id:"copying-policy-artifact-to-registry",level:3},{value:"Saving the Policy Artifact",id:"saving-the-policy-artifact",level:4},{value:"Loading Policy Artifact into Registry",id:"loading-policy-artifact-into-registry",level:4},{value:"Creating the Policy",id:"creating-the-policy",level:3},{value:"Kyverno Enforcement",id:"kyverno-enforcement",level:2},{value:"Installation",id:"installation-1",level:3},{value:"Private Registry",id:"private-registry-1",level:3},{value:"Creating the Policy",id:"creating-the-policy-1",level:3},{value:"OPA Gatekeeper Enforcement",id:"opa-gatekeeper-enforcement",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"enforcement"},"Enforcement"),(0,i.kt)("p",null,"This page will walk you through configuring Policy Enforcement (Kubewarden, Kyverno, Open Policy Agent) to ensure images running in your cluster that come from the hardened registry are validated against our public key before deploying."),(0,i.kt)("h2",{id:"kubewarden-enforcement"},"Kubewarden Enforcement"),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"To install Kubewarden, run the following commands, substituting your registry information:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'helm repo add kubewarden https://charts.kubewarden.io\nhelm repo update\n\nhelm install --wait -n kubewarden --create-namespace kubewarden-crds kubewarden/kubewarden-crds\n\nhelm install --wait -n kubewarden kubewarden-controller --set "common.cattle.systemDefaultRegistry=YOUR_REGISTRY_HERE" kubewarden/kubewarden-controller\n\nhelm install --wait -n kubewarden kubewarden-defaults --set "common.cattle.systemDefaultRegistry=YOUR_REGISTRY_HERE" kubewarden/kubewarden-defaults\n')),(0,i.kt)("p",null,"For more information about installing Kubewarden, see the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.kubewarden.io/quick-start#installation"},"docs"),"."),(0,i.kt)("h3",{id:"private-registry"},"Private Registry"),(0,i.kt)("p",null,"If your Rancher system images are in a private registry requiring authentication, you'll need to configure your Kubewarden policy-server with a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.kubewarden.io/operator-manual/policy-servers/private-registry"},"Pull Secret")," in order for it to validate the signature."),(0,i.kt)("h3",{id:"copying-policy-artifact-to-registry"},"Copying Policy Artifact to Registry"),(0,i.kt)("p",null,"You will also need to copy the policy artifact used by Kubewarden to your registry. "),(0,i.kt)("h4",{id:"saving-the-policy-artifact"},"Saving the Policy Artifact"),(0,i.kt)("p",null,"Use the below script, substituting your registry, to both validate and save locally the policy artifact:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Working directories & TAR\nDEST_DIRECTORY=/tmp/kubewarden-policy\nDEST_TAR=/tmp/kubewarden-policy.tar.gz  # Change this to the location you want for your resulting TAR \n\n# Temporarily create file with the Carbide public key\ncat <<EOT >/tmp/carbide-pub.key\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\ntCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n-----END PUBLIC KEY-----\nEOT\n\n# Verify the image\ncosign verify --key /tmp/carbide-pub.key rgcrprod.azurecr.us/policies/verify-image-signatures:v0.1.7\n\n# Save the image and compress it\ncosign save --dir "$DEST_DIRECTORY" rgcrprod.azurecr.us/policies/verify-image-signatures:v0.1.7\n\n# Compress directory\ntar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .\n\n# Clean up working directory\nrm -rf $DEST_DIRECTORY\n')),(0,i.kt)("p",null,"If working in an airgapped, you can now move that resulting TAR over the airgap."),(0,i.kt)("h4",{id:"loading-policy-artifact-into-registry"},"Loading Policy Artifact into Registry"),(0,i.kt)("p",null,"To move the Policy Artifact into your registry, use the following script and the resulting TAR from the ",(0,i.kt)("a",{parentName:"p",href:"/carbide-docs/docs/registry-docs/enforcement#saving-the-policy-artifact"},"Saving Policy"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Remote Registry\nTARGET_REGISTRY=YOUR_REGISTRY_HERE\n\n# Set these if your target registry requires authentication.\n# TARGET_REGISTRY_USER=YOUR_REGISTRY_USER_HERE\n# TARGET_REGISTRY_PASSWORD=YOUR_REGISTRY_PASSWORD_HERE\n\n# Source and Working Files\nSOURCE_TAR=/tmp/kubewarden-policy.tar.gz # Adjust if necessary to point to the TAR\nWORKING_DIR=/tmp/images  # Change this if desired/necessary\n\n# Temporarily create file with the Carbide public key\ncat <<EOT >/tmp/carbide-pub.key\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\ntCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n-----END PUBLIC KEY-----\nEOT\n\nif [[ ! -f "$SOURCE_TAR" ]]; then\n    echo "ERROR: Tarball \'$SOURCE_TAR\' not found."\n    exit 1\nfi\n\nif [[ -d "$WORKING_DIR" ]]; then\n    echo "ERROR: Working directory \'$WORKING_DIR\' exists."\n    echo "Remove it or change the value."\n    exit 1\nfi\n\nif [[ ! -z $TARGET_REGISTRY_USER ]] && [[ ! -z $TARGET_REGISTRY_PASSWORD ]]; then\n    cosign login -u $TARGET_REGISTRY_USER -p $TARGET_REGISTRY_PASSWORD $TARGET_REGISTRY\nfi\n\nmkdir -p "$WORKING_DIR"\ntar zxf "$SOURCE_TAR" -C "$WORKING_DIR"\n\ncosign verify --key /tmp/carbide-pub.key --local-image "$WORKING_DIR"\n\nif [[ "$?" != "0" ]]; then\n    echo "Exiting due to failed signature verification."\n    exit 1\nfi\n\n# Load into the registry\ncosign load --dir "$WORKING_DIR" $TARGET_REGISTRY/policies/verify-image-signatures:v0.1.7\n')),(0,i.kt)("h3",{id:"creating-the-policy"},"Creating the Policy"),(0,i.kt)("p",null,"After installing/configuring Kubewarden and copying the policy to your registry, apply the following ClusterAdmissionPolicy (substituting ",(0,i.kt)("inlineCode",{parentName:"p"},"YOUR_REGISTRY_HERE")," with your registry domain):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: policies.kubewarden.io/v1\nkind: ClusterAdmissionPolicy\nmetadata:\n  name: verify-image-signatures\nspec:\n  module: YOUR_REGISTRY_HERE/policies/verify-image-signatures:v0.1.7\n  rules:\n  - apiGroups: ["", "apps", "batch"]\n    apiVersions: ["v1"]\n    resources: ["pods", "deployments", "statefulsets", "replicationcontrollers", "jobs", "cronjobs"]\n    operations:\n    - CREATE\n    - UPDATE\n  mutating: true\n  settings:\n    signatures:\n    - image: "YOUR_REGISTRY_HERE/rancher/*"\n      pubKeys: \n        - |\n          -----BEGIN PUBLIC KEY-----\n          MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n          tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n          -----END PUBLIC KEY-----\n    - image: "YOUR_REGISTRY_HERE/longhornio/*"\n      pubKeys: \n        - |\n          -----BEGIN PUBLIC KEY-----\n          MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n          tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n          -----END PUBLIC KEY-----\n')),(0,i.kt)("h2",{id:"kyverno-enforcement"},"Kyverno Enforcement"),(0,i.kt)("h3",{id:"installation-1"},"Installation"),(0,i.kt)("p",null,"See the docs on how to install ",(0,i.kt)("a",{parentName:"p",href:"https://kyverno.io/docs/installation"},"Kyverno")," onto your cluster."),(0,i.kt)("h3",{id:"private-registry-1"},"Private Registry"),(0,i.kt)("p",null,"If your Rancher system images are in a private registry requiring authentication, you'll need to configure your Kyverno policy-server with a ",(0,i.kt)("a",{parentName:"p",href:"https://kyverno.io/policies/other/require_imagepullsecrets/require_imagepullsecrets"},"Pull Secret")," in order for it to validate the signature."),(0,i.kt)("h3",{id:"creating-the-policy-1"},"Creating the Policy"),(0,i.kt)("p",null,"After installing/configuring Kyverno, apply the following Policy (substituting ",(0,i.kt)("inlineCode",{parentName:"p"},"YOUR_REGISTRY_HERE")," with your registry domain):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: kyverno.io/v1\nkind: Policy\nmetadata:\n  name: verify-image-signatures\nspec:\n  validationFailureAction: enforce\n  background: false\n  webhookTimeoutSeconds: 30\n  failurePolicy: Fail\n  rules:\n    - name: check-image\n      match:\n        any:\n        - resources:\n            kinds:\n            - Pod\n            - Deployment\n      verifyImages:\n      - imageReferences:\n        - "YOUR_REGISTRY_HERE/rancher/*"\n        - "YOUR_REGISTRY_HERE/longhornio/*"\n        attestors:\n        - count: 1\n          entries:\n          - keys:\n              publicKeys: |-\n                -----BEGIN PUBLIC KEY-----\n                MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5zlXeLmRxBHbVmDRZpnCFdzKhyKO\n                tCAZva7CLlk/6gxvCM0QkIKznfaGTRMMYTaHMdQSau6yulDLlpokA++i8Q==\n                -----END PUBLIC KEY-----\n')),(0,i.kt)("h2",{id:"opa-gatekeeper-enforcement"},"OPA Gatekeeper Enforcement"),(0,i.kt)("p",null,"Gatekeeper can be used to verify image signatures through its ",(0,i.kt)("a",{parentName:"p",href:"https://open-policy-agent.github.io/gatekeeper/website/docs/externaldata"},"External Data Provider"),"."))}p.isMDXComponent=!0}}]);