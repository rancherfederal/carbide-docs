"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6715],{4137:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},g=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),m=c(r),u=a,p=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return r?n.createElement(p,o(o({ref:t},g),{},{components:r})):n.createElement(p,o({ref:t},g))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5491:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(4137));const i={},o="Loading Local Images to Registry",s={unversionedId:"registry-docs/loading-images",id:"registry-docs/loading-images",title:"Loading Local Images to Registry",description:"This page will walk you through seeding your registry with local images from the hardened registry for all Rancher components.",source:"@site/docs/registry-docs/loading-images.md",sourceDirName:"registry-docs",slug:"/registry-docs/loading-images",permalink:"/carbide-docs/docs/registry-docs/loading-images",draft:!1,editUrl:"https://github.com/rancherfederal/carbide-docs/edit/main/docs/registry-docs/loading-images.md",tags:[],version:"current",frontMatter:{},sidebar:"carbideSidebar",previous:{title:"Validating Images in an Airgap",permalink:"/carbide-docs/docs/registry-docs/validating-airgap-images"},next:{title:"RKE2/K3s Configuration",permalink:"/carbide-docs/docs/registry-docs/kubernetes-config"}},l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Downloading images",id:"downloading-images",level:2},{value:"Copying a Local Image to a Registry",id:"copying-a-local-image-to-a-registry",level:2}],g={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loading-local-images-to-registry"},"Loading Local Images to Registry"),(0,a.kt)("p",null,"This page will walk you through seeding your registry with local images from the hardened registry for all Rancher components."),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.sigstore.dev/cosign/installation/"},"Cosign"))),(0,a.kt)("h2",{id:"downloading-images"},"Downloading images"),(0,a.kt)("p",null,"Make sure you've checked out the section on ",(0,a.kt)("a",{parentName:"p",href:"/carbide-docs/docs/registry-docs/downloading-images"},"Downloading Images")," and that you've saved your images using the save script on that page. It is required to collect the manifest that the load script will use."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTE"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"cosign")," requires that your target registry is secured with a valid certificate. If necessary, you may need to set-up/add the CA to your host's CA chain so it interprets the secured."),(0,a.kt)("h2",{id:"copying-a-local-image-to-a-registry"},"Copying a Local Image to a Registry"),(0,a.kt)("p",null,"Update/run the following script to load your images from the generated TAR (will work for any component TAR):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Rancher Government Carbide - ",(0,a.kt)("inlineCode",{parentName:"li"},"carbide-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"K3s - ",(0,a.kt)("inlineCode",{parentName:"li"},"k3s-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"RKE2 - ",(0,a.kt)("inlineCode",{parentName:"li"},"rke2-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"Longhorn - ",(0,a.kt)("inlineCode",{parentName:"li"},"longhorn-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"NeuVector - ",(0,a.kt)("inlineCode",{parentName:"li"},"neuvector-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"Kubewarden - ",(0,a.kt)("inlineCode",{parentName:"li"},"kubewarden-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"Cert Manager - ",(0,a.kt)("inlineCode",{parentName:"li"},"cert-manager-images.tar.gz")),(0,a.kt)("li",{parentName:"ul"},"Rancher - ",(0,a.kt)("inlineCode",{parentName:"li"},"rancher-images.tar.gz"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Remote Registry\nTARGET_REGISTRY=YOUR_REGISTRY_HERE\n\n# Set these if your target registry requires authentication.\n# TARGET_REGISTRY_USER=YOUR_REGISTRY_USER_HERE\n# TARGET_REGISTRY_PASSWORD=YOUR_REGISTRY_PASSWORD_HERE\n\n# Source and Working Files\nSOURCE_TAR=IMAGE_TAR_PATH\nWORKING_DIR=/tmp/images  # Change this if desired/necessary\n\nif [[ ! -f "$SOURCE_TAR" ]]; then\n    echo "ERROR: Tarball \'$SOURCE_TAR\' not found."\n    exit 1\nfi\n\nif [[ -d "$WORKING_DIR" ]]; then\n    echo "ERROR: Working directory \'$WORKING_DIR\' exists."\n    echo "Remove it or change the value."\n    exit 1\nfi\n\nif [[ ! -z $TARGET_REGISTRY_USER ]] && [[ ! -z $TARGET_REGISTRY_PASSWORD ]]; then\n    cosign login -u $TARGET_REGISTRY_USER -p $TARGET_REGISTRY_PASSWORD $TARGET_REGISTRY\nfi\n\nmkdir -p "$WORKING_DIR"\ntar zxf "$SOURCE_TAR" -C "$WORKING_DIR"\n\nfor image in $(cat $WORKING_DIR/manifest.txt); do\n    IFS="|" read -r img_id source_image <<< $image\n    dest_image=$(echo $source_image | sed "s|TARGET_REGISTRY|$TARGET_REGISTRY|g")\n    cosign load --dir "$WORKING_DIR/$img_id" $dest_image\ndone\n\nrm -rf $WORKING_DIR\n')))}d.isMDXComponent=!0}}]);