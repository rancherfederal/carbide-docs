"use strict";(self.webpackChunkcarbide_docs=self.webpackChunkcarbide_docs||[]).push([[641],{4137:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>p});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),d=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},l=function(e){var r=d(e.components);return a.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},h=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),h=d(t),p=n,m=h["".concat(s,".").concat(p)]||h[p]||u[p]||o;return t?a.createElement(m,c(c({ref:r},l),{},{components:t})):a.createElement(m,c({ref:r},l))}));function p(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,c=new Array(o);c[0]=h;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var d=2;d<o;d++)c[d]=t[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},2993:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(7462),n=(t(7294),t(4137));const o={},c="Downloading the Images",i={unversionedId:"registry-docs/downloading-images",id:"registry-docs/downloading-images",title:"Downloading the Images",description:"This page will walk you through how you can locally download secured images from the hardened registry and package them to move over an airgap to your registry.",source:"@site/docs/registry-docs/downloading-images.md",sourceDirName:"registry-docs",slug:"/registry-docs/downloading-images",permalink:"/carbide-docs/docs/registry-docs/downloading-images",draft:!1,editUrl:"https://github.com/rancherfederal/carbide-docs/edit/main/docs/registry-docs/downloading-images.md",tags:[],version:"current",frontMatter:{},sidebar:"carbideSidebar",previous:{title:"Copying Images to a Registry",permalink:"/carbide-docs/docs/registry-docs/copying-images"},next:{title:"Loading Images to a Registry",permalink:"/carbide-docs/docs/registry-docs/loading-images"}},s={},d=[{value:"Carbide",id:"carbide",level:2},{value:"K3s",id:"k3s",level:2},{value:"RKE2",id:"rke2",level:2},{value:"Rancher",id:"rancher",level:2},{value:"Cert Manager",id:"cert-manager",level:3},{value:"Rancher",id:"rancher-1",level:3},{value:"Longhorn",id:"longhorn",level:2},{value:"NeuVector",id:"neuvector",level:2},{value:"Kubewarden",id:"kubewarden",level:2}],l={toc:d};function u(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"downloading-the-images"},"Downloading the Images"),(0,n.kt)("p",null,"This page will walk you through how you can locally download secured images from the hardened registry and package them to move over an airgap to your registry."),(0,n.kt)("p",null,"If you're copying images into a connected registry, check the documents ",(0,n.kt)("a",{parentName:"p",href:"/carbide-docs/docs/registry-docs/copying-images"},"here"),"."),(0,n.kt)("h2",{id:"carbide"},"Carbide"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NOTE:")," We are working to improve the collection and formatting of the ",(0,n.kt)("inlineCode",{parentName:"p"},"carbide")," manifests and will be updating them."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# generate the hauler manifest for carbide\ncat <<EOF > carbide-images.yaml\napiVersion: content.hauler.cattle.io/v1alpha1\nkind: Images\nmetadata:\n  name: carbide-images\n  annotations:\n    hauler.dev/key: carbide-key.pub\n    hauler.dev/platform: linux/amd64\nspec:\n  images:\n$(curl -sfL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-images.txt | sed '/nats/d' | sed 's/^/    - name: /')\n---\napiVersion: content.hauler.cattle.io/v1alpha1\nkind: Images\nmetadata:\n  name: carbide-dependency-images\n  annotations:\n    hauler.dev/platform: linux/amd64\nspec:\n  images:\n$(curl -sfL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-images.txt | sed '/rgcr/d' | sed 's/^/    - name: /')\nEOF\n\n# fetch the content from generated hauler manifest\n# verify the location of the key and the platform/architecture\nhauler store sync -f carbide-images.yaml\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename carbide-images.tar.zst\n")),(0,n.kt)("h2",{id:"k3s"},"K3s"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products k3s=v1.26.13-k3s2 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename k3s-images.tar.zst\n")),(0,n.kt)("h2",{id:"rke2"},"RKE2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products rke2=v1.26.13+rke2r1 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename rke2-images.tar.zst\n")),(0,n.kt)("h2",{id:"rancher"},"Rancher"),(0,n.kt)("h3",{id:"cert-manager"},"Cert Manager"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products cert-manager=v1.14.1 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename cert-manager-images.tar.zst\n")),(0,n.kt)("h3",{id:"rancher-1"},"Rancher"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products rancher=v2.8.2 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename rancher-images.tar.zst\n")),(0,n.kt)("h2",{id:"longhorn"},"Longhorn"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products longhorn=v1.6.0 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename longhorn-images.tar.zst\n")),(0,n.kt)("h2",{id:"neuvector"},"NeuVector"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products neuvector=v5.3.0 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename neuvector-images.tar.zst\n")),(0,n.kt)("h2",{id:"kubewarden"},"Kubewarden"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"# authenticate into carbide secured registry\ncosign login -u <redacted> -p <redacted> rgcrprod.azurecr.us\n\n# download the public key for carbide\ncurl -sfOL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-key.pub\n\n# fetch the content from the carbide secured registry\n# verify the version, location of the key, and the platform/architecture\nhauler store sync --products kubewarden=kubewarden-controller-2.0.8 --key carbide-key.pub --platform linux/amd64\n\n# save and output the content from the hauler store to tarball\nhauler store save --filename kubewarden-images.tar.zst\n")),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"/carbide-docs/docs/registry-docs/loading-images"},"Loading Local Images to Registry")," for information on loading the images into your airgapped registry."))}u.isMDXComponent=!0}}]);