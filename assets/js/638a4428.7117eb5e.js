"use strict";(self.webpackChunkcarbide_docs=self.webpackChunkcarbide_docs||[]).push([[8417],{1546:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"registry-docs/downloading-images","title":"Downloading the Images","description":"The Carbide Secured Registry (CSR) is not intended to be used as the primary registry for running Kubernetes clusters. Instead, follow these steps to download and package the images to move over an airgap to your own registry.","source":"@site/docs/registry-docs/downloading-images.md","sourceDirName":"registry-docs","slug":"/registry-docs/downloading-images","permalink":"/carbide-docs/docs/registry-docs/downloading-images","draft":false,"unlisted":false,"editUrl":"https://github.com/rancherfederal/carbide-docs/edit/main/docs/registry-docs/downloading-images.md","tags":[],"version":"current","frontMatter":{},"sidebar":"carbideSidebar","previous":{"title":"Copying Images to a Registry","permalink":"/carbide-docs/docs/registry-docs/copying-images"},"next":{"title":"Loading Images to a Registry","permalink":"/carbide-docs/docs/registry-docs/loading-images"}}');var n=s(4848),t=s(8453);const c={},o="Downloading the Images",i={},l=[{value:"Downloading Secured Images",id:"downloading-secured-images",level:2},{value:"Carbide",id:"carbide",level:3},{value:"Rancher",id:"rancher",level:3},{value:"Cert Manager",id:"cert-manager",level:3},{value:"RKE2",id:"rke2",level:3},{value:"K3s",id:"k3s",level:3},{value:"Harvester",id:"harvester",level:3},{value:"Longhorn",id:"longhorn",level:3},{value:"NeuVector",id:"neuvector",level:3},{value:"Kubewarden",id:"kubewarden",level:3}];function d(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"downloading-the-images",children:"Downloading the Images"})}),"\n",(0,n.jsx)(r.p,{children:"The Carbide Secured Registry (CSR) is not intended to be used as the primary registry for running Kubernetes clusters. Instead, follow these steps to download and package the images to move over an airgap to your own registry."}),"\n",(0,n.jsxs)(r.p,{children:["If you're copying images into a connected registry, check the documentation ",(0,n.jsx)(r.a,{href:"/carbide-docs/docs/registry-docs/copying-images",children:"here"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["This example uses ",(0,n.jsx)(r.a,{href:"https://docs.hauler.dev/docs/intro",children:"Hauler"}),", but any tool with the ability to push/pull an OCI image will be adequate."]}),"\n",(0,n.jsx)(r.h2,{id:"downloading-secured-images",children:"Downloading Secured Images"}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"NOTE:"})," The following steps are for pulling the multi-arch images. Please see the ",(0,n.jsx)(r.a,{href:"https://rancherfederal.github.io/hauler-docs/docs/guides-references/hauler-content/images",children:"Hauler Docs"})," for how to specify a specific platform."]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"carbide",children:"Carbide"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"1. Generate the Hauler manifest for Carbide."})}),"\n",(0,n.jsx)(r.p,{children:"The Hauler manifest is a yaml file which specifies the artifacts to fetch."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"cat <<EOF > carbide-images.yaml\napiVersion: content.hauler.cattle.io/v1\nkind: Images\nmetadata:\n  name: carbide-images\nspec:\n  images:\n$(curl -sfL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-images.txt | sed '/nats/d' | sed 's/^/    - name: /')\n---\napiVersion: content.hauler.cattle.io/v1\nkind: Images\nmetadata:\n  name: carbide-dependency-images\nspec:\n  images:\n$(curl -sfL https://raw.githubusercontent.com/rancherfederal/carbide-releases/main/carbide-images.txt | sed '/rgcr/d' | sed 's/^/    - name: /')\nEOF\n"})}),"\n",(0,n.jsxs)(r.p,{children:["You can optionally set metadata such as platform specs and public keys in the manifest instead of through command line flags (not shown in this example). For more information on this, check out the ",(0,n.jsx)(r.a,{href:"https://docs.hauler.dev/docs/guides-references/hauler-manifests",children:"Hauler Manifests"})," guide."]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"2. Fetch the content from the Hauler manifest."})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"hauler store sync"})," command syncs the content specified in the manifest with the Hauler store, which can then be copied to your registry."]}),"\n",(0,n.jsxs)(r.p,{children:["Setting ",(0,n.jsx)(r.code,{children:"--store"})," allows you to specify the Hauler store, in this case, ",(0,n.jsx)(r.code,{children:"carbide-store"}),". You may also specify the desired platform at this step with ",(0,n.jsx)(r.code,{children:"--platform"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store carbide-store --files carbide-images.yaml --platform <platform/arch> --key carbide-key.pub\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"3. Save and output the content from the Hauler store to a tarball."})}),"\n",(0,n.jsx)(r.p,{children:"If you named your store in the previous step, specify which store you'd like to save."}),"\n",(0,n.jsxs)(r.p,{children:["Use ",(0,n.jsx)(r.code,{children:"--filename"})," to name the tar file output."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store carbide-store --filename carbide-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"rancher",children:"Rancher"}),"\n",(0,n.jsxs)(r.p,{children:["Carbide customers can also fetch ",(0,n.jsx)(r.code,{children:"collections"})," from the CSR, which will pull all the required artifacts for a product into the Hauler store."]}),"\n",(0,n.jsx)(r.p,{children:"Installing Rancher requires Cert Manager, which can be pulled from the CSR as well."}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"1. Log in to the Carbide Secured Registry."})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler login -u <username> -p <password> rgcrprod.azurecr.us\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"2. Sync Rancher to your Hauler store."})}),"\n",(0,n.jsxs)(r.p,{children:["Specify the  ",(0,n.jsx)(r.code,{children:"--products"})," flag with your desired version."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store rancher-store --products rancher=v2.8.3 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"3. Save the Hauler store as a tarball."})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store rancher-store --filename rancher-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"cert-manager",children:"Cert Manager"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store certmanager-store --products cert-manager=v1.14.4 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store certmanager-store --filename certmanager-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"rke2",children:"RKE2"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store rke2-store --products rke2=v1.27.12+rke2r1 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store rke2-store --filename rke2-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"k3s",children:"K3s"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store k3s-store --products k3s=v1.27.12-k3s1 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store k3s-store --filename k3s-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"harvester",children:"Harvester"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store harvester-store --products harvester=v1.4.1 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store copy --store harvester-store --filename harvester-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"longhorn",children:"Longhorn"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store longhorn-store --products longhorn=v1.6.1 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store longhorn-store --filename longhorn-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"neuvector",children:"NeuVector"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store neuvector-store --products neuvector=v5.3.2 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store neuvector-store --filename neuvector-images.tar.zst\n"})}),"\n",(0,n.jsx)(r.h3,{id:"kubewarden",children:"Kubewarden"}),"\n",(0,n.jsx)(r.p,{children:"Sync content:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store sync --store kubewarden-store --products kubewarden=kubewarden-controller-2.0.11 --key carbide-key.pub --platform <platform/arch>\n"})}),"\n",(0,n.jsx)(r.p,{children:"Save tarball:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"hauler store save --store kubewarden-store --filename kubewarden-images.tar.zst\n"})}),"\n",(0,n.jsxs)(r.p,{children:["See ",(0,n.jsx)(r.a,{href:"/carbide-docs/docs/registry-docs/loading-images",children:"Loading Local Images to Registry"})," for information on loading the images into your airgapped registry."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>c,x:()=>o});var a=s(6540);const n={},t=a.createContext(n);function c(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);